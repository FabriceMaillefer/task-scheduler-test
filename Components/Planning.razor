@namespace BlazorScheduleur.Components

<div class="sh-layout">
    <div class="sh-fixed-left">
        <div class="sh-header">
            &nbsp;
        </div>

        <div class="sh-machines" >
            @foreach (var machine in _machines)
            {
                <div class="@($"sh-grid-cell sh-machine-row {(_hoverMachine == machine ? "active-machine " : " ")}")">
                    @machine.Name
                </div>
            }
        </div>
    </div>
    <div class="sh-scrollview">
        <div class="sh-grid" 
            @ondragover:preventDefault 
            @ondragenter:preventDefault 
            @ondrop:preventDefault 
            ondragstart="event.dataTransfer.setData('text', event.target.id);"
            >
        @foreach (var visibleStep in _visibleSteps)
        {
            <div class="sh-header">
                @visibleStep.Title
            </div>
        }

        @foreach (var machine in _machines)
        {
            @foreach (var visibleStep in _visibleSteps)
            {
                <div class="@($"sh-grid-cell-bg sh-machine-row {(_hoverMachine == machine ? "active-machine " : " ")} {(_hoverStep == visibleStep ? "active-step " : " ")}")"  
                style="@($"grid-row: {machine.Row +1}; grid-column: {visibleStep.Column}")" 
                    >
                </div>
            }
        }

        @foreach (var workItem in _workItems.Where(e => e.Machine is not null))
        {
            <div class="@($"sh-task {(_selectedWorkItem == workItem ? "active " : " ")} {(_draggedWorkItem == workItem ? "dragged " : " ")}")" 
            
                @onclick="@(() => {_selectedWorkItem = workItem;})"
                style="@($"grid-row: {workItem.Machine?.Row +1 ?? 0}; grid-column: {workItem.Start} / {workItem.Start + workItem.Duration}")"
                >
                <div class="gripper gripper-h-left cursor-col-resize" draggable="true" @ondragstart="(e) => GripperStartHandleDragStart(e, workItem)"></div>
                <div class="sh-task-content movable" draggable="true" @ondragstart="(e) => HandleDragStart(e, workItem)">@workItem.Id - @workItem.Duration</div>
                <div class="gripper gripper-h-right cursor-col-resize" draggable="true" @ondragstart="(e) => GripperEndHandleDragStart(e, workItem)"></div>
            </div>
        }

        @if(_tempWorkItem is not null)
        {
            <div class="sh-task sh-task-temporary"
                style="@($"grid-row: {_tempWorkItem.Machine?.Row +1 ?? 0}; grid-column: {_tempWorkItem.Start} / {_tempWorkItem.Start + _tempWorkItem.Duration}")"
                >
                <div class="sh-task-content">@_tempWorkItem.Id - @_tempWorkItem.Duration</div>
            </div>
        }

        @foreach (var machine in _machines)
        {
            @foreach (var visibleStep in _visibleSteps)
            {
                <div class="sh-grid-cell sh-machine-row"  
                style="@($"grid-row: {machine.Row +1}; grid-column: {visibleStep.Column}")" 

                    @ondragover:preventDefault 
                    @ondragover="@((e) => HandleDragOver(e, visibleStep, machine))"
                    @ondragenter:preventDefault 
                    @ondragenter="()=> { }" 
                    @ondrop="@((e) => HandleDrop(e, visibleStep, machine))" 
                    @ondrop:preventDefault 
                    ondragstart="event.dataTransfer.setData('text', event.target.id);"
                        @ondrop:stopPropagation
                        @ondragenter:stopPropagation
                        @ondragend:stopPropagation
                        @ondragover:stopPropagation
                        @ondragleave:stopPropagation
                        @ondragstart:stopPropagation
                    >
                </div>
            }
        }
        </div>
    </div>
</div>

<br />
<div>
    <MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" OnClick="@(() => _addWortItem())">
        Ajouter
    </MudButton>
</div>
<br />
<div class="sh-stock"
 @ondragover:preventDefault 
 @ondragover="@((e) => HandleDragOver(e, null, null))"
 @ondragenter:preventDefault 
 @ondragenter="()=> { }" 
 @ondrop="@((e) => HandleDrop(e, null, null))" 
 @ondrop:preventDefault 
 ondragstart="event.dataTransfer.setData('text', event.target.id);"
    @ondrop:stopPropagation
    @ondragenter:stopPropagation
    @ondragend:stopPropagation
    @ondragover:stopPropagation
    @ondragleave:stopPropagation
    @ondragstart:stopPropagation
>
    @foreach (var workItem in _workItems.Where(e => e.Machine is null))
    {
        <div class="sh-task" draggable="true" @ondragstart="(e) => HandleDragStart(e, workItem)">
            <div class="movable">@workItem.Id - @workItem.Duration</div>
        </div>
    }
</div>

<style>

    .sh-machine-row{
        height: 50px;
    }

    .sh-layout{
        display: grid;
        grid-template-columns: min-content 2fr;
    }

    .sh-fixed-left{
        max-width: 400px;
        width: 20vh;
    }
    .sh-scrollview{
      overflow-x: auto;  
    }

    .sh-header {
        font-weight: bold;
        text-align: center;
        overflow: hidden;
    }

    .sh-grid {
        display: grid;
        grid-template-columns: repeat(52, 100px);
    }

    .sh-grid .sh-grid-cell{
        z-index: 2;
    }
    .sh-grid .sh-grid-cell-bg {
        border-bottom: 1px solid darkgray;
        border-left: 1px solid darkgray;
        z-index: 0;
    }

    .sh-grid-cell-bg.active-step{
        background-color: lightblue;
    }

    .sh-grid-cell-bg.active-machine{
        background-color: lightblue;
    }

    .sh-machines .sh-grid-cell{
        display: flex;
        align-items: center;
        border-bottom: 1px solid darkgray;
        border-right: 1px solid darkgray;
    }
    
    .sh-task {
        margin: 4px;
        background-color: burlywood;
        min-height: 20px;

        z-index: 99;

        display: flex;
        justify-content: stretch;
        border-radius: 3px;
    }

    .sh-task.active{
        background-color: bisque;
        border-color: darkcyan;
        border-width: 1px;
    }

    .sh-task.dragged{
        display: none;
    }

    .sh-task-temporary{
        border-style: dashed;
        border-width: 1px;
        background-color: antiquewhite;
        z-index: 0;
    }
    .sh-task-content{
        width: 100%;
        text-align: center;
        align-self: center;
    }
    .movable{
        cursor: move;
    }
    .gripper{
        
    }
    .gripper-h-right{
        width: 4px;
        height: 80%;
        margin: 0 2px ;
        border-left: solid black 1px;
        align-self: center;
        justify-self: flex-end;
    }
    .gripper-h-left{
        width: 4px;
        height: 80%;
        margin: 0 2px ;
        border-right: solid black 1px;
        align-self: center;
    }
    .gripper-top{
        height: 4px;
        width: 4px;
        margin: 2px 0;
        border-top: solid black 1px;
        border-bottom: solid black 1px;
    }

    .sh-stock{
        min-height: 100px;
        background-color: lightgray;
        padding: 8px;
    }

</style>

@code {
    List<Machine> _machines = new List<Machine>();
    Machine? _hoverMachine = null;

    List<Step> _visibleSteps = new List<Step>();
    Step? _hoverStep = null;

    List<WorkItem> _workItems = new List<WorkItem>();

    WorkItem? _selectedWorkItem = null;

    WorkItem? _draggedWorkItem = null;
    WorkItem? _tempWorkItem = null;

    bool _selectEndOfTask = false;

    [Inject]
    ILogger<Planning> Logger {get;set;}

        private void _addWortItem()
        {
            _workItems.Add(
                new WorkItem(){ 
                    Id = $"WO{_workItems.Count+1}", 
                    Duration = _workItems.Count+1
                }
            );
        }

    private void GripperStartHandleDragStart(DragEventArgs e, WorkItem workItem)
    {
        Logger.LogInformation("GripperStartHandleDragStart {id}", workItem.Id);
        _selectedWorkItem = workItem;
        _draggedWorkItem = workItem;
        _selectEndOfTask = false;
    }

    private void GripperEndHandleDragStart(DragEventArgs e, WorkItem workItem)
    {
        Logger.LogInformation("GripperEndHandleDragStart {id}", workItem.Id);
        _selectedWorkItem = workItem;
        _draggedWorkItem = workItem;
        _selectEndOfTask = true;
    }

    private void HandleDragStart(DragEventArgs e, WorkItem workItem){
        Logger.LogInformation("HandleDragStart {id}", workItem.Id);
        _selectedWorkItem = workItem;
        _draggedWorkItem = workItem;
        _selectEndOfTask = false;
    }

    private void HandleDrop(DragEventArgs e, Step? step, Machine? machine){
        Logger.LogInformation($"HandleDrop on {step?.Title}, {machine?.Name}, {_selectEndOfTask}");

        _tempWorkItem = null;

        if(_draggedWorkItem is not null){
            _draggedWorkItem.Machine = machine;

            if(step is not null)
            {
                _draggedWorkItem.Step = step;
                if(_selectEndOfTask)
                {
                    _draggedWorkItem.Start = step.Column - _draggedWorkItem.Duration + 1;
                }
                else
                {
                    _draggedWorkItem.Start = step.Column;
                }
            }
        }

        _draggedWorkItem = null;
    }

    private void HandleDragOver(DragEventArgs e, Step? step, Machine? machine){
        _hoverStep = step;
        _hoverMachine = machine;
        if(_draggedWorkItem is not null)
        {
            _tempWorkItem = new WorkItem(){
                Duration = _draggedWorkItem.Duration,
                Id = _draggedWorkItem.Id,
                Machine = machine,
                Step = step,
                Start = step?.Column ?? 1
            };
        }
        
        Logger.LogInformation($"HandleDragOver on {step?.Title}, {machine?.Name}");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    protected override void OnInitialized()
    {
        for (int i = 0; i < 5; i++)
        {
            _machines.Add(new Machine()
            {
                Name = $"Machine {i+1}",
                Row = i+1,
            });
        }

         for (int i = 0; i < 52; i++)
        {
            _visibleSteps.Add(new Step()
            {
                Title = $"W{i+1}",
                Column = i+1,
            });
        }

        _workItems.Add(new WorkItem(){
            Id = "WO1",
            Machine = _machines[0],
            Step = _visibleSteps[2],
            Start = 3,
            Duration = 1,
        });

        _workItems.Add(new WorkItem(){
            Id = "WO2",
            Duration = 3,
        });

       

        base.OnInitialized();
    }
}



